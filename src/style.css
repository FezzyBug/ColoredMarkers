h1{
    text-align: center;
}

/*There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, */
/*and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.*/
/*green, and blue are introduced. An easy way to see this is with the CSS rgb function.*/
.container{
    background-color: rgb(255, 255, 255);

/*Same styling and value input as margin setting*/
/*a margin is the space around an element's border, */
/*while padding is the space between an element's border and the element's content. */
    padding: 10px 0;
}




/* THIS IS TO FORMAT ALL MARKERS BODIES */
.marker{
    /*The background color was applied, but since the marker */
    /*div element is empty, it doesn't have any height by default.*/

    height: 25px;
    width: 200px;

    /*To center your marker on the page, set its margin property to auto. */
    /*This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.*/

    /*To add space between our three marker objects we make use of the margin auto + 10px property.*/
    /*We esseintally use the auto to set the values of margin-top and margin-bottom as the first value to auto, and then*/
    /*we set margin-left and margin-right as the second value (margin; auto is shorthand to set all to auto).
      margin-top and margin-bottom        margin-left and margin-right
              ↓                              ↓                               */
    margin:  10px                           auto;
}

/* This section handles styling each marker */
.red {
    /*A function is a piece of code that can take an input and perform a specific action. */
    /*The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:*/
    /*rgb(red, green, blue);*/
    /*background-color: red;*/
    /*This is the RGB function controlling our colors function*/
    /*                     ↓                         */
    /*background-color: rgb(255, 0, 0);*/

    /*Maxing it out to 255 as the first value gives us red.*/


    /*linear-gradient function actually creates an image element, and is usually*/

    /*paired with the background property which can accept an image as a value.*/

    /*so changing background-color to background*/
    /*                                      Color stop ↓                                          */
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
}

.green {
    background: linear-gradient( #55680D, #71F53E, #116C31);
}

.blue {
    background:linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%),  hsl(240, 56%, 42%));
}


/*
Tertiary colors are created by combining a primary with a nearby secondary color.
 So red max (255) + green (127) = orange as a Tertiary color

 To create secondary colors we add pure maxes to create these colors:
 so green max (255) + blue max(255) = cyan as a secondary color in our rgb function.

TODO -> *************** More Tertiary Colors **************************

There are three more tertiary colors: chartreuse green (green + yellow), azure (blue + cyan), and rose (red + magenta).

To create chartreuse green, update the rgb function in the .one rule so that red is at 127, and set green to the max value.

For azure, update the rgb function in the .two rule so that green is at 127 and blue is at the max value.

And for rose, which is sometimes called bright pink, update the rgb function in the .
three rule so that blue is at 127 and red is at the max value.

TODO -> ************* Understanding the color wheel and complementary colors ****************
A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart.

For example, pure red is between the hues rose and orange.Two colors that are opposite from each other on the color

wheel are called complementary colors. If two complementary colors are combined, they produce gray.

But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.

- Set the red value to the max of 255 to produce pure red + et the values for green and blue to the max of 255 to produce cyan.

TODO -> **************************** Website design *******************************
red and cyan colors are very bright right next to each other. This contrast can be distracting if it's overused on a
website, and can make text hard to read if it's placed on a complementary-colored background.

It's better practice to choose one color as the dominant color, and use its complementary color
as an accent to bring attention to certain content on the page.

eyes are naturally drawn to the red color in the center?
When designing a site, you can use this effect to draw attention to important headings, buttons, or links.

TODO -> ********************** Understanding and Using Hexadecimal for colors *********************
Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red,

the second pair represent green, and the third pair represent blue. For example, #4B5320

Hex color code with the values 00 for red, FF for green, and 00 blue = (0,255,0)

TODO -> Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

TODO -> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F

With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red,
100% green, and 0% blue, and is the same as rgb(0, 255, 0).

TODO -> ****************** HSL Color Model **************************
The HSL color model, or hue, saturation, and lightness, is another way to represent colors.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue,
a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.

hsl(240,100%, 50%) = blue or rgb(255,0,0)

TODO -> ************** Creating and Using Gradients ******************
A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the

direction of the transition along a line, and which colors are used.

One thing to remember is that the linear-gradient function actually creates an image element, and is usually

paired with the background property which can accept an image as a value.

linear-gradient(gradientDirection, color1, color2, ...);

gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments,

which are the colors that will be used in the transition itself. These can be any type of color, including

color keywords, hex, rgb, or hsl.

.red {
  background: linear-gradient(90deg);
}

If no gradientDirection argument is provided to the linear-gradient function,

it arranges colors from top to bottom, or along a 180 degree line, by default.


TODO -> Color-stops allow you to fine-tune where colors are placed along the gradient line.
They are a length unit like px or percentages that follow a color in the linear-gradient function.



For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line,
so red takes up most of the available space:

linear-gradient(90deg, red 90%, black);


*/